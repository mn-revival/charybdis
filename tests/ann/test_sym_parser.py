import os
import tempfile

from charybdis.ann import sym_parser, types

import pytest


@pytest.mark.parametrize(
    "line",
    [
        "",
        " ",
        "; comment",
        " ; comment",
    ],
)
def test_parse_sym_line__empty(line: str) -> None:
    assert None is sym_parser.parse_sym_line(line)


@pytest.mark.parametrize(
    "line,ann",
    [
        (
            "01:2345 .code:0123",
            types.ann(0x01, 0x2345, "", types.CodeType(size=0x0123)),
        ),
        (
            "01:2345 .data:0123",
            types.ann(
                0x01,
                0x2345,
                "",
                types.ArrayType(type=types.PrimitiveType.U8, size=0x0123),
            ),
        ),
        (
            "01:2345 .image:00a0",
            types.ann(0x01, 0x2345, "", types.ImageType(size=0xA0, width=None)),
        ),
        (
            "01:2345 .image:00a0:w16",
            types.ann(0x01, 0x2345, "", types.ImageType(size=0xA0, width=16)),
        ),
    ],
)
def test_parse_sym_line(line: str, ann: types.Ann) -> None:
    assert ann == sym_parser.parse_sym_line(line)


SYM_FILE = """
; Symbol file for "/path/to/game.gbc" generated by Random Emulator

00:0000 .code:0003
00:0307 .data:0012
""".strip()


def test_parse_sym_file() -> None:
    with tempfile.TemporaryFile(mode="w+") as f:
        f.write(SYM_FILE)
        f.seek(0, os.SEEK_SET)
        anns = sym_parser.parse_sym_file(f)
    assert anns.has(
        types.Ann(
            addr=types.BankAddr(bank=0x00, addr=0x0000),
            label="",
            type=types.CodeType(size=0x03),
        )
    )
    assert anns.has(
        types.Ann(
            addr=types.BankAddr(bank=0x00, addr=0x0307),
            label="",
            type=types.ArrayType(type=types.PrimitiveType.U8, size=0x12),
        )
    )
